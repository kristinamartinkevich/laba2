1.Что такое .Net Frameworkи из чего он состоит?



.NET Framework — программная платформа, выпущенная компанией Microsoft в 2002 году. Основой платформы является общеязыковая среда исполнения Common Language Runtime (CLR), которая подходит для разных языков программирования. Функциональные возможности CLR доступны в любых языках программирования, использующих эту среду.

Считается, что платформа .NET Framework явилась ответом компании Microsoft на набравшую к тому времени большую популярность платформу Java компании Sun Microsystems (ныне принадлежит Oracle).

Хотя .NET является патентованной технологией корпорации Microsoft и официально рассчитана на работу под операционными системами семейства Microsoft Windows, существуют независимые проекты (прежде всего это Mono и Portable.NET), позволяющие запускать программы .NET на некоторых других операционных системах. В настоящее время .NET Framework получает развитие в виде .NET Core, изначально предполагающей кросcплатформенную разработку и эксплуатацию.



2.Поясните, что такое CLR-среда.

Common Language Runtime (англ. CLR — общеязыковая исполняющая среда) — исполняющая среда для байт-кода CIL (MSIL), в который компилируются программы, написанные на .NET-совместимых языках программирования (C#, Managed C++, Visual Basic .NET, F# и прочие). CLR является одним из основных компонентов пакета Microsoft .NET Framework.

Среда CLR является реализацией спецификации CLI (англ. Common Language Infrastructure), спецификации общеязыковой инфраструктуры компании Microsoft.


3.Что такое FCL?

Framework Class Library (FCL)
Вторым типом библиотек платформы .NET Framework является библиотека классов платформы (FCL). Она является вторым основным компонентом платформы .NET, которая упрощают работу программиста, предоставляя ему, более расширенные библиотеки, такие как: ASP.NET, ADO.NET, Windows Forms, WPF.

В принципе можно сказать, что Framework Class Library включает в себя библиотеку базовых классов BCL, которая, по сути, является её ядром.

Тогда на вопрос, из каких основных компонентов состоит платформа .NET? Можно ответить так:

.NET Framework = CLR + FCL

Такую официальную формулировку так же приводят: MSDN, Wiki и многие другие авторы книг.

&#171;The key components of the .NET Framework are the common language runtime (CLR) and the .NET Framework class library&#187;. MSDN

Но мы знаем, что FCL включает в себя библиотеки базовых классов. И правильнее формулировка должна звучать так:

.NET Framework = CLR + Libraries (FCL, BCL) 
Но тут конечно можно долго спорить.



4.Какая наименьшая исполнимая единица в .NET?

Сборка (assembly) - один или несколько файлов, содержащий логический набор функциональности (код и другие данные, связанные с кодом). Бывают статические сборки, хранящиеся на диске, и динамические, которые создаются во время выполнения программы. Сборка - это базовый блок приложения, все ресурсы, относящиеся к ней, доступны или только внутри этого блока, или экспортируются наружу. При выполнении сборка задает область видимости имен и следит за ее соблюдением



5.Что такое IL?

IL (Intermediate Language) - код, содержащий набор инструкций, не зависящих от платформы. Иными словами, после компиляции исходного кода он преобразуется не в код для какой-то определенной платформы, а в промежуточный код на языке IL.



6.Пояснить работу JIT-компилятора?

JIT-компиляция (англ. Just-in-time compilation, компиляция «на лету»), динамическая компиляция (англ. dynamic translation) — технология увеличения производительности программных систем, использующих байт-код, путём компиляции байт-кода в машинный код или в другой формат непосредственно во время работы программы. Таким образом достигается высокая скорость выполнения по сравнению с интерпретируемым байт-кодом[1] (сравнимая с компилируемыми языками) за счёт увеличения потребления памяти (для хранения результатов компиляции) и затрат времени на компиляцию. JIT базируется на двух более ранних идеях, касающихся среды исполнения: компиляции байт-кода и динамической компиляции.



7.Что такое CTS (Common Type System)?

Common Type System (сокр. CTS, рус. Общая система типов) — часть .NET Framework, формальная спецификация, определяющая, как какой-либо тип (класс, интерфейс, структура, встроенный тип данных) должен быть определён для его правильного выполнения средой .NET. Кроме того, данный стандарт определяет, как определения типов и специальные значения типов представлены в компьютерной памяти. Целью разработки CTS было обеспечение возможности программам, написанным на различных языках программирования, легко обмениваться информацией. Как это принято в языках программирования, тип может быть описан как определение набора допустимых значений (например, «все целые от 0 до 10») и допустимых операций над этими значениями (например, сложение и вычитание).



8.Какие аспекты поведения определяет  тип System.Object?

 
Поддерживает все классы в иерархии классов .NET Framework и предоставляет службы низкого уровня для производных классов. Он является исходным базовым классом для всех классов платформы .NET Framework и корнем иерархии типов.



9.Что находится в MSCorLib dll?


Mscorlib.ni.dll - это файл DLL в Windows. DLL - это аббревиатура от Dynamic Link Library (динамически подключаемая библиотека). DLL файлы необходимы программам или расширениям веб-браузера, потому что они содержат программный код, данные и ресурсы. Бесплатный форум с информацией о файлах может помочь вам разобраться является ли mscorlib.ni.dll вирусом, трояном, программой-шпионом, рекламой, которую вы можете удалить, или файл принадлежит системе Windows или приложению, которому можно доверять.




10.Что такое частные и общие сборки?

Частные находятся в каталоге программы, а общие в GAC


11.Что такое assembly manifest?

Манифест сборки (assembly manifest) - это внутренняя часть сборки, которая позволяет ей быть самоописанной. Assembly manifest позволяет идентифицировать сборку, указывает файлы, которые включаются в реализацию сборки, описывает типы и ресурсы, используемые в сборке, указывает зависимости от других сборок, а также набор прав доступа, которые необходимы сборке для корректной работы. Эта информация используется во время выполнения для разрешения ссылок, проверку корректности версий, проверку целостности загруженных сборок.



12.Что такое GAC?


GAC — это глобальный кэш сборок. В нем хранятся совместно используемые сборки. Обычно это каталог С:\Windows\Assembly\GAC. Этот каталог имеет определенную структуру, в котором хранятся подкаталоги, имена которых сгенерированы по определенному алгоритму. В GAC можно поместить только сборки со строгими именами. Для того, чтобы поместить сборку в GAC, используют специальный инструмент GACUtil.exe, который знает всю внутреннюю структуру GAC и может генерировать имена подкаталогов надлежащим образом. Регистрировать в GAC сборки необходимо для того, чтобы избежать конфликтов имен сборок. Приведем пример: две компании выпустили сборку и назвали ее одним именем Calculus. Если мы скопируем эту сборку в каталог, в котором уже находится сборка с таким же именем, то мы затрем сборку, которая ранее могла использоваться каким-то приложением. Это приложение с новой сборкой теперь работать не сможет. Решением этой проблемы будет регистрация этих двух сборок в GAC, в котором для каждой будет создан отдельный каталог.



13.Чем managed code отличается отunmanaged code

Управляемый код (managed code) - это код, работающий в среде CLR. Содержит метаданные, в которых находится информация для среды выполнения - о типах, членах и ссылках, используемых в коде


14.Как и для чего определен метод Main?


В каждом приложении на C# должен присутствовать один метод Main, указывающий точку начала выполнения программы. В языке C# Main пишется с прописной буквы, в то время как в языке Java используется нижний регистр main.
Main может возвращать только int или void, и имеет необязательный аргумент массива строк для представления параметров командной строки:


15.Варианты использования директивы using( using Directive ) в C#.

Директива using используется в следующих трех целях.
Для разрешения использования типов в пространстве имен, чтобы не нужно было квалифицировать использование типа в этом пространстве имен:
C#

Копировать
using System.Text;  
Для разрешения доступа к статическим членам типа без необходимости квалификации доступа с помощью имени типа:
C#

Копировать
using static System.Math;  
Дополнительные сведения см. в разделе Директива using static.
Чтобы создать псевдоним для пространства имен или типа. Это называется директивой using static.
C#

Копировать
using Project = PC.MyCompany.Project;  
Ключевое слово using также используется для создания операторов using, которые помогают обеспечить правильную обработку объектов IDisposable, таких как файлы и шрифты. Дополнительные сведения см. в разделе Оператор using.



16.Как связаны между собой сборкии пространства имен?

перед использованием using SomeNameSpace;, вы должны указать в проекте ссылку на сборку, в которой объявлены типы данного пространства имен. Но это не ни как не влияет на то, что сборки и пространства имен не имеют жесткой связи на уровне языка и платформы. Пространства имен - всего лишь агрегатная приставка к имени типа для явного указания принадлежности типа к определенной группе логически связанных типов, не более того. А вот типы, в отличие от пространств имен, имеют жесткую связь со сборкой в которой находятся,



17.Что такое примитивные типы данных?Перечислите их.

binary
Содержит двоичные данные.
MaxLength, FixedLength, Nullable, Default
Boolean
Содержит значение true или false.
Nullable, Default
Byte
Содержит 8-битное целое значение без знака.
Precision, Nullable, Default
DateTime
Представляет дату и время.
Precision, Nullable, Default
DateTimeOffset
Возвращает дату и время в виде смещения в минутах от времени GMT.
Precision, Nullable, Default
decimal
Содержит точное числовое значение с заданной точностью и масштабом.
Precision, Nullable, Default
Double
Содержит число с плавающей запятой с точностью до 15 цифр.
Precision, Nullable, Default
float
Содержит число с плавающей запятой с точностью до 7 цифр.
Precision, Nullable, Default
Guid
Содержит уникальный 16-битный идентификатор.
Precision, Nullable, Default
Int16
Содержит 16-разрядное целое значение со знаком.
Precision, Nullable, Default
Int32
Содержит 32-разрядное целое значение со знаком.
Precision, Nullable, Default
Int64
Содержит 64-разрядное целое значение со знаком.
Precision, Nullable, Default
SByte
Содержит 8-разрядное целое значение со знаком.
Precision, Nullable, Default
string
Содержит символьные данные.
Unicode, FixedLength, MaxLength, Collation, Precision, Nullable, Default
Время
Содержит время дня.
Precision, Nullable, Default



18,19,20.Что такое ссылочные типы? Какие типы относятся к ним?
Какие типы относятся к типам-значениям?В чем отличие между ссылочными и значимыми типами данных?

В отличие от некоторых языков программирования, C # имеет две разновидности типов данных: для значения и для ссылки. Если производительность приложения имеет существенное значение или есть заинтересованность в том, как C# управляет данными и памятью, важно знать различия между этими типами.
Если в объявлении переменной используется один из основных встроенных типов данных или определенная пользователем структура данных, значит мы имеем дело с типом значения. Исключение составляет тип данных string, который является ссылочным типом.
Тип значения хранит свое содержимое в памяти, выделенной в стеке. Например, значение 42 в таком случае хранится в области памяти, называемой стеком.

int x = 42;


При выходе переменной x из области действия в связи с завершением выполнения метода, в котором она была объявлена, значение удаляется из стека.
Использование стека является эффективным, но ограниченное время существования типов значений делает их менее подходящими для совместного использования данных между различными классами.
В отличие от этого ссылочный тип, такой как экземпляр класса или массив, размещается в другой области памяти, называемой кучей. В следующем примере пространство, необходимое для массива из десяти целых чисел, размещается в куче.

int[] numbers = new int[10];


Эта память не возвращается к куче при завершении метода, она освобождается только когда система сборки мусора C# определит, что она больше не нужна. Объявление ссылочных типов увеличивает расход ресурсов, но их преимущество заключается в том, что они могут быть доступны из других классов.


Тип object

Тип string

Классы (class)

Интерфейсы (interface)

Делегаты (delegate)


21.Что такое упаковка и распаковка значимых типов?

Упаковкой называется процесс преобразования типа значения в ссылочный тип. Для упаковки переменной необходимо создать ссылочную переменную, указывающую на новую копию в куче. Ссылочная переменная является объектом, следовательно для нее можно использовать все методы, наследуемые каждым объектом, например ToString(). В следующем коде показано, как это происходит.
C#
int i = 67;                              // i is a value type
object o = i;                            // i is boxed
System.Console.WriteLine(i.ToString());  // i is boxed


Распаковка применяется для классов, предназначенных для работы с объектами: например, использование ArrayList для хранения целых чисел. Для хранения целых чисел в ArrayList используется упаковка. При извлечении целого числа должна быть применена распаковка.
C#
System.Collections.ArrayList list = 
    new System.Collections.ArrayList();  // list is a reference type
int n = 67;                              // n is a value type
list.Add(n);                             // n is boxed
n = (int)list[0];                        // list[0] is unboxed





22.Для чего используется тип dynamic?

C# 4 добавляет новый тип dynamic. Этот тип является статическим, но объект типа dynamic обходит проверку статического типа. В большинстве случаев он работает как тип object. Во время компиляции предполагается, что элемент, типизированный как dynamic, поддерживает любые операции. Это значит, что вам не придется задумываться о том, получает ли объект значение из API COM, из динамического языка, такого как IronPython, из модели DOM HTML, из отражения или из другой части программы. При этом если код недопустимый, ошибки перехватываются во время выполнения.


23.Что такое неявно типизированная переменная?

Локальные переменные можно объявлять без указания конкретного типа. Ключевое слово var указывает, что компилятор должен вывести тип переменной из выражения справа от оператора инициализации. Выведенный тип может быть встроенным, анонимным, определяемым пользователем либо типом, определяемым в библиотеке классов .NET Framework. 


24.Для чего используют Nullableтип?

Типы, допускающие значения NULL, являются экземплярами структуры System.Nullable<T>. Тип, допускающий значение NULL, может принимать такой же диапазон значений, как и его базовый тип значения, а также дополнительное значение null. Например, для типа Nullable<Int32> (Int32, допускающий значения NULL) можно назначить любое значение в диапазоне от -2147483648 до 2147483647 или значение null. Тип Nullable<bool> может иметь значения true, false, или null. Возможность назначения null для числовых и логических типов особенно полезна при работе с базами данных и другими источниками данных, которые могут содержать элементы без присвоенного значения. Например, логическое поле в базе данных может хранить значения true или false, или может быть неопределенным.


25.Как объявить строковый литерал? Какие операции можно выполнять со строкой?


Строка — это объект типа String, значением которого является текст. Внутри программы текст хранится в виде упорядоченной коллекции объектов Char только для чтения. В конце строки C# нет нуль-символов. Поэтому строка C# может содержать любое число внедренных нуль-символов ('\0'). Свойство Length строки соответствует числу содержащихся в ней объектов Char, но не числу символов Юникода. Для доступа к отдельным кодовым точкам Юникода в строке используйте объект StringInfo.

В C# поддерживается еще один тип литералов — строковый. Строковый литерал представляет собой набор символов, заключенных в двойные кавычки. Например следующий фрагмент кода:

"This is text"
Помимо обычных символов, строковый литерал может содержать одну или несколько управляющих последовательностей символов, о которых речь шла выше. Также можно указать буквальный строковый литерал. Такой литерал начинается с символа @, после которого следует строка в кавычках. Содержимое строки в кавычках воспринимается без изменений и может быть расширено до двух и более строк. Это означает, что в буквальный строковый литерал можно включить символы новой строки, табуляции и прочие, не прибегая к управляющим последовательностям. Единственное исключение составляют двойные кавычки ("), для указания которых необходимо использовать двойные кавычки с обратным слэшем ("\").


операции:
Конкатенация
Сравнение строк
Поиск в строке
Разделение строк
Обрезка строки
Вставка
Удаление строк
Замена
Смена регистра

26.Какие есть способы для задания и инициализации строк?


Вы можете объявлять и инициализировать строки различными способами, как показано в следующем примере:

// Declare without initializing.
string message1;

// Initialize to null.
string message2 = null;

// Initialize as an empty string.
// Use the Empty constant instead of the literal "".
string message3 = System.String.Empty;

//Initialize with a regular string literal.
string oldPath = "c:\\Program Files\\Microsoft Visual Studio 8.0";

// Initialize with a verbatim string literal.
string newPath = @"c:\Program Files\Microsoft Visual Studio 9.0";

// Use System.String if you prefer.
System.String greeting = "Hello World!";

// In local variables (i.e. within a method body)
// you can use implicit typing.
var temp = "I'm still a strongly-typed System.String!";

// Use a const string to prevent 'message4' from
// being used to store another string value.
const string message4 = "You can't get rid of me!";

// Use the String constructor only when creating
// a string from a char*, char[], or sbyte*. See
// System.String documentation for details.
char[] letters = { 'A', 'B', 'C' };
string alphabet = new string(letters);



 
27.Какие методы есть у типа String?









Имя	Описание
System_CAPS_pubmethod	Clone()	
Возвращает ссылку на данный экземпляр класса String.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, Int32, String, Int32, Int32)	
Сравнивает подстроки двух указанных объектов String и возвращает целое число, которое показывает их относительное положение в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, Int32, String, Int32, Int32, Boolean)	
Сравнивает подстроки двух заданных объектов String (с учетом или без учета регистра) и возвращает целое число, которое показывает их относительное положение в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)	
Сравнивает подстроки двух заданных объектов String (с учетом или без учета регистра), используя сведения о языке и региональных параметрах, и возвращает целое число, которое показывает их относительное положение в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, Int32, String, Int32, Int32, CultureInfo, CompareOptions)	
Сравнивает подстроки двух заданных объектов String, используя указанные параметры сравнения и сведения о языке и региональных параметрах, которые влияют на сравнение, и возвращает целое число, показывающее связь между двумя подстроками в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, Int32, String, Int32, Int32, StringComparison)	
Сравнивает подстроки двух указанных объектов String с использованием заданных правил и возвращает целое число, которое показывает их относительное положение в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, String)	
Сравнивает два указанных объекта String и возвращает целое число, которое показывает их относительное положение в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, String, Boolean)	
Сравнивает два указанных объекта String (с учетом или без учета регистра) и возвращает целое число, которое показывает их относительное положение в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, String, Boolean, CultureInfo)	
Сравнивает два указанных объекта String (с учетом или без учета регистра), используя сведения о языке и региональных параметрах, и возвращает целое число, которое показывает их относительное положение в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, String, CultureInfo, CompareOptions)	
Сравнивает два заданных объекта String, используя указанные параметры сравнения и сведения о языке и региональных параметрах, которые влияют на сравнение, и возвращает целое число, показывающее связь между двумя строками в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	Compare(String, String, StringComparison)	
Сравнивает два указанных объекта String с использованием заданных правил и возвращает целое число, которое показывает их относительное положение в порядке сортировки.
System_CAPS_pubmethodSystem_CAPS_static	CompareOrdinal(String, Int32, String, Int32, Int32)	
Сравнивает подстроки двух указанных объектов String, вычисляя числовые значения соответствующих объектов Char в каждой подстроке.
System_CAPS_pubmethodSystem_CAPS_static	CompareOrdinal(String, String)	
Сравнивает два указанных объекта String, оценивая числовые значения соответствующих объектов Char в каждой строке.
System_CAPS_pubmethod	CompareTo(Object)	
Сравнивает данный экземпляр с указанным объектом Object и показывает, расположен ли экземпляр перед, после или в той же позиции в порядке сортировки, что и заданный объект Object.
System_CAPS_pubmethod	CompareTo(String)	
Сравнивает данный экземпляр с заданным объектом String и показывает, расположен ли данный экземпляр перед, после или на той же позиции в порядке сортировки, что и заданная строка.
System_CAPS_pubmethodSystem_CAPS_static	Concat(IEnumerable<String>)	
Сцепляет элементы созданной коллекции IEnumerable<T> типа String.
System_CAPS_pubmethodSystem_CAPS_static	Concat(Object)	
Создает строковое представление указанного объекта.
System_CAPS_pubmethodSystem_CAPS_static	Concat(Object, Object)	
Сцепляет строковые представления двух указанных объектов.
System_CAPS_pubmethodSystem_CAPS_static	Concat(Object, Object, Object)	
Сцепляет строковые представления трех указанных объектов.
System_CAPS_pubmethodSystem_CAPS_static	Concat(Object, Object, Object, Object)	
Сцепляет строковые представления четырех указанных объектов и любые объекты, заданные в необязательном списке параметров переменной длины.
System_CAPS_pubmethodSystem_CAPS_static	Concat(Object[])	
Сцепляет строковые представления элементов указанного массива Object.
System_CAPS_pubmethodSystem_CAPS_static	Concat(String, String)	
Сцепляет два указанных экземпляра String.
System_CAPS_pubmethodSystem_CAPS_static	Concat(String, String, String)	
Сцепляет три указанных экземпляра String.
System_CAPS_pubmethodSystem_CAPS_static	Concat(String, String, String, String)	
Сцепляет четыре указанных экземпляра String.
System_CAPS_pubmethodSystem_CAPS_static	Concat(String[])	
Сцепляет элементы указанного массива String.
System_CAPS_pubmethodSystem_CAPS_static	Concat<T>(IEnumerable<T>)	
Сцепляет элементы реализации IEnumerable<T>.
System_CAPS_pubmethod	Contains(String)	
Возвращает значение, указывающее, содержит ли указанная строка значение подстроки переданной в качестве параметра.
System_CAPS_pubmethodSystem_CAPS_static	Copy(String)	
Создает экземпляр String, имеющий то же значение, что и указанный экземпляр String.
System_CAPS_pubmethod	CopyTo(Int32, Char[], Int32, Int32)	
Копирует указанное число символов начиная с указанной позиции в данном экземпляре в указанную позицию массива символов Юникода.
System_CAPS_pubmethod	EndsWith(String)	
Определяет, совпадает ли конец данного экземпляра строки с указанной строкой.
System_CAPS_pubmethod	EndsWith(String, Boolean, CultureInfo)	
Определяет, совпадает ли конец данного экземпляра строки с заданной строкой при сравнении с учетом заданного языка и региональных параметров.
System_CAPS_pubmethod	EndsWith(String, StringComparison)	
Определяет, совпадает ли конец экземпляра строки с заданной строкой при сравнении с учетом заданного параметра сравнения.
System_CAPS_pubmethod	Equals(Object)	
Определяет, равны ли значения этого экземпляра и указанного объекта, который также должен быть объектом String.(Переопределяет Object.Equals(Object).)
System_CAPS_pubmethod	Equals(String)	
Определяет, равны ли значения этого экземпляра и указанного объекта String.
System_CAPS_pubmethodSystem_CAPS_static	Equals(String, String)	
Определяет, совпадают ли значения двух указанных объектов String.
System_CAPS_pubmethodSystem_CAPS_static	Equals(String, String, StringComparison)	
Определяет, совпадают ли значения двух указанных объектов String. Параметр определяет язык и региональные параметры, учет регистра и правила сортировки, используемые при сравнении.
System_CAPS_pubmethod	Equals(String, StringComparison)	
Определяет, равны ли значения этой строки и указанного объекта String. Параметр определяет язык и региональные параметры, учет регистра и правила сортировки, используемые при сравнении.
System_CAPS_pubmethodSystem_CAPS_static	Format(IFormatProvider, String, Object)	
Заменяет элементы формата в указанной строке строковым представлением соответствующего объекта. Параметр предоставляет сведения об особенностях форматирования, связанных с языком и региональными параметрами.
System_CAPS_pubmethodSystem_CAPS_static	Format(IFormatProvider, String, Object, Object)	
Заменяет элементы формата в указанной строке строковым представлением двух указанных объектов. Параметр предоставляет сведения об особенностях форматирования, связанных с языком и региональными параметрами.
System_CAPS_pubmethodSystem_CAPS_static	Format(IFormatProvider, String, Object, Object, Object)	
Заменяет элементы формата в указанной строке строковым представлением трех указанных объектов. Параметр предоставляет сведения об особенностях форматирования, связанных с языком и региональными параметрами.
System_CAPS_pubmethodSystem_CAPS_static	Format(IFormatProvider, String, Object[])	
Заменяет элементы формата в указанной строке строковым представлениями соответствующих объектов в указанном массиве. Параметр предоставляет сведения об особенностях форматирования, связанных с языком и региональными параметрами.
System_CAPS_pubmethodSystem_CAPS_static	Format(String, Object)	
Заменяет один или более элементов формата в указанной строке строковым представлением указанного объекта.
System_CAPS_pubmethodSystem_CAPS_static	Format(String, Object, Object)	
Заменяет элементы формата в указанной строке строковым представлением двух указанных объектов.
System_CAPS_pubmethodSystem_CAPS_static	Format(String, Object, Object, Object)	
Заменяет элементы формата в указанной строке строковым представлением трех указанных объектов.
System_CAPS_pubmethodSystem_CAPS_static	Format(String, Object[])	
Заменяет элемент формата в указанной строке строковым представлением соответствующего объекта в указанном массиве.
System_CAPS_pubmethod	GetEnumerator()	
Извлекает объект, который может выполнять итерацию отдельных знаков данной строки.
System_CAPS_pubmethod	GetHashCode()	
Возвращает хэш-код для этой строки.(Переопределяет Object.GetHashCode().)
System_CAPS_pubmethod	GetType()	
Возвращает объект Type для текущего экземпляра.(Наследуется от Object.)
System_CAPS_pubmethod	GetTypeCode()	
Возвращает TypeCode для класса String.
System_CAPS_pubmethod	IndexOf(Char)	
Возвращает индекс с отсчетом от нуля первого вхождения указанного символа Юникода в данной строке.
System_CAPS_pubmethod	IndexOf(Char, Int32)	
Возвращает индекс с отсчетом от нуля первого вхождения указанного символа Юникода в данной строке. Поиск начинается с указанной позиции знака.
System_CAPS_pubmethod	IndexOf(Char, Int32, Int32)	
Возвращает индекс с отсчетом от нуля первого вхождения указанного символа в данном экземпляре. Поиск начинается с указанной позиции знака; проверяется заданное количество позиций.
System_CAPS_pubmethod	IndexOf(String)	
Возвращает индекс с отсчетом от нуля первого вхождения значения указанной строки в данном экземпляре.
System_CAPS_pubmethod	IndexOf(String, Int32)	
Возвращает индекс с отсчетом от нуля первого вхождения значения указанной строки в данном экземпляре. Поиск начинается с указанной позиции знака.
System_CAPS_pubmethod	IndexOf(String, Int32, Int32)	
Возвращает индекс с отсчетом от нуля первого вхождения значения указанной строки в данном экземпляре. Поиск начинается с указанной позиции знака; проверяется заданное количество позиций.
System_CAPS_pubmethod	IndexOf(String, Int32, Int32, StringComparison)	
Возвращает индекс с отсчетом от нуля первого вхождения указанной строки в текущем объекте String. Параметры задают начальную позицию поиска в текущей строке, количество проверяемых знаков текущей строки и тип поиска.
System_CAPS_pubmethod	IndexOf(String, Int32, StringComparison)	
Возвращает индекс с отсчетом от нуля первого вхождения указанной строки в текущем объекте String. Параметры задают начальную позицию поиска в текущей строке и тип поиска.
System_CAPS_pubmethod	IndexOf(String, StringComparison)	
Возвращает индекс с отсчетом от нуля первого вхождения указанной строки в текущем объекте String. Параметр определяет тип поиска заданной строки.
System_CAPS_pubmethod	IndexOfAny(Char[])	
Возвращает индекс с отсчетом от нуля первого обнаруженного в данном экземпляре символа из указанного массива символов Юникода.
System_CAPS_pubmethod	IndexOfAny(Char[], Int32)	
Возвращает индекс с отсчетом от нуля первого обнаруженного в данном экземпляре символа из указанного массива символов Юникода. Поиск начинается с указанной позиции знака.
System_CAPS_pubmethod	IndexOfAny(Char[], Int32, Int32)	
Возвращает индекс с отсчетом от нуля первого обнаруженного в данном экземпляре символа из указанного массива символов Юникода. Поиск начинается с указанной позиции знака; проверяется заданное количество позиций.
System_CAPS_pubmethod	Insert(Int32, String)	
Возвращает новую строку, в которой указанная строка вставляется в указанной позиции индекса в данном экземпляре.
System_CAPS_pubmethodSystem_CAPS_static	Intern(String)	
Извлекает системную ссылку на указанный объект String.
System_CAPS_pubmethodSystem_CAPS_static	IsInterned(String)	
Извлекает ссылку на указанный объект String.
System_CAPS_pubmethod	IsNormalized()	
Указывает, находится ли данная строка в форме нормализации Юникода C.
System_CAPS_pubmethod	IsNormalized(NormalizationForm)	
Указывает, находится ли данная строка в заданной форме нормализации Юникода.
System_CAPS_pubmethodSystem_CAPS_static	IsNullOrEmpty(String)	
Указывает, является ли указанная строка строкой null или Empty.
System_CAPS_pubmethodSystem_CAPS_static	IsNullOrWhiteSpace(String)	
Указывает, имеет ли указанная строка значение null, является ли она пустой строкой или строкой, состоящей только из символов-разделителей.
System_CAPS_pubmethodSystem_CAPS_static	Join(String, IEnumerable<String>)	
Сцепляет элементы созданной коллекции IEnumerable<T> типа String, помещая между ними заданный разделитель.
System_CAPS_pubmethodSystem_CAPS_static	Join(String, Object[])	
Сцепляет элементы массива объектов, помещая между ними заданный разделитель.
System_CAPS_pubmethodSystem_CAPS_static	Join(String, String[])	
Сцепляет все элементы массива строк, помещая между ними заданный разделитель.
System_CAPS_pubmethodSystem_CAPS_static	Join(String, String[], Int32, Int32)	
Сцепляет указанные элементы массива строк, помещая между ними заданный разделитель.
System_CAPS_pubmethodSystem_CAPS_static	Join<T>(String, IEnumerable<T>)	
Сцепляет элементы созданной коллекции, помещая между ними заданный разделитель.
System_CAPS_pubmethod	LastIndexOf(Char)	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения указанного символа Юникода в пределах данного экземпляра.
System_CAPS_pubmethod	LastIndexOf(Char, Int32)	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения указанного символа Юникода в пределах данного экземпляра. Поиск начинается с указанной позиции символа и выполняется в обратном направлении до начала строки.
System_CAPS_pubmethod	LastIndexOf(Char, Int32, Int32)	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения указанного символа Юникода в подстроке в пределах данного экземпляра. Поиск начинается с указанной позиции символа и выполняется в обратном направлении до начала строки для заданного числа позиций символов.
System_CAPS_pubmethod	LastIndexOf(String)	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения указанной строки в данном экземпляре.
System_CAPS_pubmethod	LastIndexOf(String, Int32)	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения указанной строки в данном экземпляре. Поиск начинается с указанной позиции символа и выполняется в обратном направлении до начала строки.
System_CAPS_pubmethod	LastIndexOf(String, Int32, Int32)	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения указанной строки в данном экземпляре. Поиск начинается с указанной позиции символа и выполняется в обратном направлении до начала строки для заданного числа позиций символов.
System_CAPS_pubmethod	LastIndexOf(String, Int32, Int32, StringComparison)	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения указанной строки в данном экземпляре. Поиск начинается с указанной позиции символа и выполняется в обратном направлении до начала строки для заданного числа позиций символов. Параметр определяет тип сравнения для выполнения во время поиска заданной строки.
System_CAPS_pubmethod	LastIndexOf(String, Int32, StringComparison)	
Возвращает индекс с отсчетом от нуля последнего вхождения указанной строки в текущем объекте String. Поиск начинается с указанной позиции символа и выполняется в обратном направлении до начала строки. Параметр определяет тип сравнения для выполнения во время поиска заданной строки.
System_CAPS_pubmethod	LastIndexOf(String, StringComparison)	
Возвращает индекс с отсчетом от нуля последнего вхождения указанной строки в текущем объекте String. Параметр определяет тип поиска заданной строки.
System_CAPS_pubmethod	LastIndexOfAny(Char[])	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения в данном экземпляре какого-либо одного или нескольких символов, указанных в массиве символов Юникода.
System_CAPS_pubmethod	LastIndexOfAny(Char[], Int32)	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения в данном экземпляре какого-либо одного или нескольких символов, указанных в массиве символов Юникода. Поиск начинается с указанной позиции символа и выполняется в обратном направлении до начала строки.
System_CAPS_pubmethod	LastIndexOfAny(Char[], Int32, Int32)	
Возвращает позицию индекса с отсчетом от нуля последнего вхождения в данном экземпляре какого-либо одного или нескольких символов, указанных в массиве символов Юникода. Поиск начинается с указанной позиции символа и выполняется в обратном направлении до начала строки для заданного числа позиций символов.
System_CAPS_pubmethod	Normalize()	
Возвращает новую строку, текстовое значение которой совпадает с данной строкой, а двоичное представление находится в нормализованной форме C Юникода.
System_CAPS_pubmethod	Normalize(NormalizationForm)	
Возвращает новую строку, текстовое значение которой совпадает с данной строкой, а двоичное представление находится в заданной нормализованной форме Юникода.
System_CAPS_pubmethod	PadLeft(Int32)	
Возвращает новую строку, в которой знаки данного экземпляра выровнены по правому краю путем добавления слева символов-разделителей до указанной общей длины.
System_CAPS_pubmethod	PadLeft(Int32, Char)	
Возвращает новую строку, в которой знаки данного экземпляра выровнены по правому краю путем добавления слева пробелов или указанного знака Юникода до указанной общей длины.
System_CAPS_pubmethod	PadRight(Int32)	
Возвращает новую строку, в которой знаки данной строки выровнены по левому краю путем добавления справа символов-разделителей до указанной общей длины.
System_CAPS_pubmethod	PadRight(Int32, Char)	
Возвращает новую строку, в которой знаки данной строки выровнены по левому краю путем добавления справа пробелов или указанного знака Юникода до указанной общей длины.
System_CAPS_pubmethod	Remove(Int32)	
Возвращает новую строку, в которой были удалены все символы, начиная с указанной позиции и до конца в текущем экземпляре.
System_CAPS_pubmethod	Remove(Int32, Int32)	
Возвращает новую строку, в которой было удалено указанное число символов, начиная с указанной позиции.
System_CAPS_pubmethod	Replace(Char, Char)	
Возвращает новую строку, в которой все вхождения заданного знака Юникода в текущем экземпляре заменены другим заданным знаком Юникода.
System_CAPS_pubmethod	Replace(String, String)	
Возвращает новую строку, в которой все вхождения заданной строки в текущем экземпляре заменены другой заданной строкой.
System_CAPS_pubmethod	Split(Char[])	
Разбивает строку на подстроки в зависимости от символов в массиве.
System_CAPS_pubmethod	Split(Char[], Int32)	
Разбивает строку на максимальное число подстрок в зависимости от символов в массиве. Можно также указать максимальное число возвращаемых подстрок.
System_CAPS_pubmethod	Split(Char[], Int32, StringSplitOptions)	
Разбивает строку на максимальное число подстрок в зависимости от символов в массиве.
System_CAPS_pubmethod	Split(Char[], StringSplitOptions)	
Разбивает строку на подстроки в зависимости от символов в массиве. Можно указать, включают ли подстроки пустые элементы массива.
System_CAPS_pubmethod	Split(String[], Int32, StringSplitOptions)	
Разбивает строку на максимальное число подстрок в зависимости от строк в массиве. Можно указать, включают ли подстроки пустые элементы массива.
System_CAPS_pubmethod	Split(String[], StringSplitOptions)	
Разбивает строку на подстроки в зависимости от строк в массиве. Можно указать, включают ли подстроки пустые элементы массива.
System_CAPS_pubmethod	StartsWith(String)	
Определяет, совпадает ли начало данного экземпляра строки с указанной строкой.
System_CAPS_pubmethod	StartsWith(String, Boolean, CultureInfo)	
Определяет, совпадает ли начало экземпляра строки с заданной строкой при сравнении с учетом заданного языка и региональных параметров.
System_CAPS_pubmethod	StartsWith(String, StringComparison)	
Определяет, совпадает ли начало этого экземпляра строки с заданной строкой при сравнении с учетом заданного параметра сравнения.
System_CAPS_pubmethod	Substring(Int32)	
Извлекает подстроку из данного экземпляра. Подстрока начинается в указанном положении символов и продолжается до конца строки.
System_CAPS_pubmethod	Substring(Int32, Int32)	
Извлекает подстроку из данного экземпляра. Подстрока начинается с указанной позиции знака и имеет указанную длину.
System_CAPS_pubmethod	ToCharArray()	
Копирует знаки данного экземпляра в массив знаков Юникода.
System_CAPS_pubmethod	ToCharArray(Int32, Int32)	
Копирует знаки из указанной подстроки данного экземпляра в массив знаков Юникода.
System_CAPS_pubmethod	ToLower()	
Возвращает копию данной строки, переведенную в нижний регистр.
System_CAPS_pubmethod	ToLower(CultureInfo)	
Возвращает копию этой строки, переведенную в нижний регистр, используя правила определения регистра заданного языка и региональных параметров.
System_CAPS_pubmethod	ToLowerInvariant()	
Возвращает копию этого объекта String, переведенную в нижний регистр, используя правила учета регистра инвариантного языка и региональных параметров.
System_CAPS_pubmethod	ToString()	
Возвращает этот экземпляр String; реальное преобразование не осуществляется.(Переопределяет Object.ToString().)
System_CAPS_pubmethod	ToString(IFormatProvider)	
Возвращает этот экземпляр String; реальное преобразование не осуществляется.
System_CAPS_pubmethod	ToUpper()	
Возвращает копию этой строки, переведенную в верхний регистр.
System_CAPS_pubmethod	ToUpper(CultureInfo)	
Возвращает копию этой строки, переведенную в верхний регистр, используя правила определения регистра заданного языка и региональных параметров.
System_CAPS_pubmethod	ToUpperInvariant()	
Возвращает копию этого объекта String, переведенную в верхний регистр, используя правила учета регистра инвариантного языка и региональных параметров.
System_CAPS_pubmethod	Trim()	
Удаляет все начальные и конечные символы-разделители из текущего объекта String.
System_CAPS_pubmethod	Trim(Char[])	
Удаляет все начальные и конечные вхождения набора знаков, заданного в виде массива, из текущего объекта String.
System_CAPS_pubmethod	TrimEnd(Char[])	
Удаляет все конечные вхождения набора знаков, заданного в виде массива, из текущего объекта String.
System_CAPS_pubmethod	TrimStart(Char[])	
Удаляет все начальные вхождения набора знаков, заданного в виде массива, из текущего объекта String.









28.В чем отличие пустой и nullстроки?
29.Как можно выполнитьсравнениестрок?
30.В чем отличие типов Stringи StringBuilder?
31.Поясните явныепреобразования переменных с помощью команд Convert.
32.Как выполнить консольный ввод/вывод?
33.Приведите примеры определенияи инициализацииодномерных и двумерных массивов.
34.Что такое ступенчатый массив? Как его задать?
35.Какие типы можно использовать в foreach? Приведите пример.
36.Что такое кортеж?Для чего и как он используется?
37.Что такое локальная функция?
